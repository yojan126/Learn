在软件开发中，我们经常想要对一类对象添加不同的功能，例如要给手机添加贴膜，手机挂件，手机外壳等，
如果此时利用继承来实现的话，就需要定义无数的类，如StickerPhone（贴膜是手机类）、AccessoriesPhone（挂件手机类）等，
这样就会导致 ”子类爆炸“问题，为了解决这个问题，我们可以使用装饰者模式来动态地给一个对象添加额外的职责。下面让我们看看装饰者模式。

装饰者模式以对客户透明的方式动态地给一个对象附加上更多的责任，装饰者模式相比生成子类可以更灵活地增加功能。

从上面的客户端代码可以看出，客户端可以动态地将手机配件增加到手机上，如果需要添加手机外壳时，
此时只需要添加一个继承Decorator的手机外壳类，从而，装饰者模式扩展性也非常好。

装饰者模式中各个角色有：

抽象构件（Phone）角色：给出一个抽象接口，以规范准备接受附加责任的对象。
具体构件（AppPhone）角色：定义一个将要接收附加责任的类。
装饰（Dicorator）角色：持有一个构件（Component）对象的实例，并定义一个与抽象构件接口一致的接口。
具体装饰（Sticker和Accessories）角色：负责给构件对象 ”贴上“附加的责任。
 

三、装饰者模式的优缺点
看完装饰者模式的详细介绍之后，我们继续分析下它的优缺点。

优点：
装饰这模式和继承的目的都是扩展对象的功能，但装饰者模式比继承更灵活
通过使用不同的具体装饰类以及这些类的排列组合，设计师可以创造出很多不同行为的组合
装饰者模式有很好地可扩展性
缺点：装饰者模式会导致设计中出现许多小对象，如果过度使用，会让程序变的更复杂。并且更多的对象会是的差错变得困难，特别是这些对象看上去都很像。

四、使用场景
下面让我们看看装饰者模式具体在哪些情况下使用，在以下情况下应当使用装饰者模式：

需要扩展一个类的功能或给一个类增加附加责任。
需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
需要增加由一些基本功能的排列组合而产生的非常大量的功能

总结
到这里，装饰者模式的介绍就结束了，装饰者模式采用对象组合而非继承的方式实现了再运行时动态地扩展对象功能的能力，
而且可以根据需要扩展多个功能，避免了单独使用继承带来的 ”灵活性差“和”多子类衍生问题“。
同时它很好地符合面向对象设计原则中 ”优先使用对象组合而非继承“和”开放-封闭“原则。